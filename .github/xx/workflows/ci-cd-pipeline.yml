name: Spillway CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allows manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  MAVEN_VERSION: 3.9.0
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Backend validation and build
  backend-build:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./spillway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Run backend tests
      run: mvn test
      continue-on-error: true  # Remove once tests are added
      
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: spillway/target/*.jar
        retention-days: 5
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      continue-on-error: true  # Remove once tests are added
      with:
        name: Backend Test Results
        path: spillway/target/surefire-reports/*.xml
        reporter: java-junit

  # Frontend validation and build
  frontend-build:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./spillway-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: spillway-frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      continue-on-error: true  # Add this script to package.json later
      
    - name: Build frontend
      run: npm run build
      
    - name: Run frontend tests
      run: npm test
      continue-on-error: true  # Add this script to package.json later
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: spillway-frontend/dist
        retention-days: 5

  # Docker build validation
  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: [backend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: spillway/target/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./spillway
        file: ./spillway/Dockerfile
        push: false
        tags: spillway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Docker Compose validation
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: spillway/target/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start services
      working-directory: ./spillway
      run: |
        docker-compose up -d
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be healthy..."
        timeout 60s bash -c 'until docker-compose ps | grep -q "Up"; do sleep 2; done'
        
    - name: Check service health
      working-directory: ./spillway
      run: |
        docker-compose ps
        docker-compose logs --tail=50 mysql
        docker-compose logs --tail=50 spillway
        
    - name: Test API endpoint
      run: |
        echo "Waiting for API to be ready..."
        timeout 30s bash -c 'until curl -f http://localhost:8081/actuator/health 2>/dev/null; do sleep 1; done'
        curl -f http://localhost:8081/actuator/health || exit 1
      continue-on-error: true  # Remove after adding actuator endpoint
        
    - name: Shutdown services
      working-directory: ./spillway
      if: always()
      run: docker-compose down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner (repo)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'table'
        exit-code: '0'  # Change to 1 to fail on vulnerabilities
        severity: 'CRITICAL,HIGH'
        
  # Code quality check
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven
        
    - name: Analyze code with SonarCloud
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd spillway
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=spillway \
          -Dsonar.organization=your-org \
          -DskipTests
      if: env.SONAR_TOKEN != ''

  # Build and push Docker images (only on main/develop branches)
  docker-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, docker-compose-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: spillway/target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./spillway
        file: ./spillway/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment job (placeholder)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [docker-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step - implement deployment strategy here"